{"mappings":"","sources":["script/sketch.js"],"sourcesContent":["let fbo = undefined;\nlet short = 128;\nlet font;\n\nfunction setup() {\n    pixelDensity(1);\n    createCanvas(windowWidth, windowHeight, WEBGL);\n    background(100);\n    // Options for creating our framebuffer, width and height relative to the size of our canvas determine the pixelation appearance\n    const options = {\n        width: 128,\n        height: 128,\n        textureFiltering: NEAREST, // Required to prevent interpolation (blurring) when we upscale the image. Gives the pixelated effect that we're going for\n    };\n    // Disable p5's smoothing\n    noSmooth();\n    short = min(width, height);\n    // Make the framebuffer\n    fbo = createFramebuffer(options);\n}\n\nfunction draw() {\n    background(0);\n    fbo.begin(); // Begin drawing stuff in the framebuffer\n    noFill();\n    stroke(200, 20, 20);\n    strokeWeight(abs(sin(frameCount / 42)));\n    clear();\n    background(0);\n    rotateX(frameCount / 50);\n    rotateY(frameCount / 200);\n    const s = 12;\n    translate(-3 * s, -3 * s, 0);\n    for (let i = 0; i < 7; i++) {\n        for (let j = 0; j < 7; j++) {\n            push();\n            translate(i * s, j * s, 0);\n            rotateZ(((1 + i + j) * frameCount) / 100);\n            box(s * 0.8);\n            pop();\n        }\n    }\n    fbo.end(); // Finish drawing stuff in the framebuffer\n    // Render an image of the framebuffer, centering and stretching it to the size of the canvas\n    image(fbo, -short / 2, -short / 2, short, short);\n}\n\nfunction windowResized() {\n    resizeCanvas(windowWidth, windowHeight);\n    short = min(width, height);\n}\n"],"names":[],"version":3,"file":"index.fb7c4125.js.map"}